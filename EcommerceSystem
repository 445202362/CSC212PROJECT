public class EcommerceSystem {
	private LinkedList<Product> products;
	private LinkedList<Customer> customers;
	private LinkedList<Order> orders;
	private LinkedList<Review> reviews;

	public EcommerceSystem() {
		products = new LinkedList<>();
		customers = new LinkedList<>();
		orders = new LinkedList<>();
		reviews = new LinkedList<>();
	}
    // getters for the linked lists
    public LinkedList<Product> getProducts(){
        return products;
    }

     public LinkedList<Customer> getCustomers(){
        return customers;
    }

    public LinkedList<Order> getOrders(){
        return orders;
    }

    public LinkedList<Review> getReviews(){
        return reviews;
    }


																										//== 	REVIEW OPERATIONS	==

// (1) Extract reviews from a specific customer 
    public LinkedList<Review> extractReviewsFromCustomer(int customerId){

    LinkedList<Review> customerReviews = new LinkedList<Review>(); //empty list to store reviews for a specific customer

    if(!reviews.empty()){
        reviews.findFirst();
        while(!reviews.last()){
            Review review = reviews.retrieve();
            if(review.getCustomer().getCustomerId() == customerId)
            customerReviews.insert(review);
            reviews.findNext();
        }
        //check the last element
         Review review = reviews.retrieve();
        if(review.getCustomer().getCustomerId() == customerId)
            customerReviews.insert(review);
    }
    return customerReviews;
    }  






// (2) Add review
    public Review addReview(int reviewId , int productId , int customerId , int rating , String comment){
        if (rating < 1 || rating > 5) {
        System.out.println("Rating must be between 1 and 5 !");
        return null;
    }
            // Find product and customer
    Product product = searchProductById(productId);
    Customer customer = searchCustomerById(customerId);


    if (product == null || customer == null) {
        System.out.println("Product or Customer not found");
        return null;
    }
    
            // add the new review
    Review review = new Review(reviewId, product, customer, rating, comment);
     reviews.insert(review);

      System.out.println("Review added successfully!");
      return review;
}






// (3) edit review
    public void editReview(int reviewId, int rating, String comment) {
    if (reviews.empty()) {
        System.out.println("Review with ID " + reviewId + " not found!");
        return;
    }
    reviews.findFirst();
    
    // Check all reviews except the last one
    while (!reviews.last()) {

        Review review = reviews.retrieve();
        if (review.getReviewId() == reviewId) {
            Review updatedReview = new Review(reviewId , review.getProduct() , review.getCustomer() , rating, comment);
            reviews.update(updatedReview);
            System.out.println("Review " + reviewId + " updated successfully!");
            return;
        }
        reviews.findNext();
    }
    
    // Check the last element
    Review review = reviews.retrieve();
    if (review.getReviewId() == reviewId) {
        Review updatedReview = new Review(reviewId , review.getProduct() , review.getCustomer() , rating , comment);
        reviews.update(updatedReview);
        System.out.println("Review " + reviewId + " updated successfully!");
        return;
    }
    
      System.out.println("Review with ID " + reviewId + " not found!");
}
																										//==END OF REVIEW OPERATIONS==




																										//== 	CUSTOMER OPERATIONS	==
																										
// (4) Search a customer id
    public Customer searchCustomerById(int customerId) {
    customers.findFirst();
    while (!customers.last()) {
        Customer customer = customers.retrieve();
        if (customer.getCustomerId() == customerId) {
            return customer;
        }
        customers.findNext();
    }
    Customer customer = customers.retrieve();
    return (customer.getCustomerId() == customerId) ? customer : null;
    }






// (5) Register customer
    public Customer registerCustomer(int customerId, String name, String email) {
    // Check if customer already exists
    if (!customers.empty()) {
        customers.findFirst();
        while (!customers.last()) {
            Customer customer = customers.retrieve();
            if (customer.getCustomerId() == customerId) {
                System.out.println("Customer with ID " + customerId + " already exists!");
                return null;
            }
            customers.findNext();
        }
        // Check last customer
        Customer lastCustomer = customers.retrieve();
        if (lastCustomer.getCustomerId() == customerId) {
            System.out.println("Customer with ID " + customerId + " already exists!");
            return null;
        }
    }
    // Create and add new customer
    Customer newCustomer = new Customer(customerId, name, email);
    customers.insert(newCustomer);
    
    System.out.println("Customer '" + name + "' registered successfully!");
    return newCustomer;
}
																										//==END OF CUSTOMER OPERATIONS==


																										//== 	PRODUCT OPERATIONS	==
// (6) get common 5 star reviews
	public LinkedList<Product> getCommonHighlyRatedProducts(int custId1, int custId2) {
		LinkedList<Product> common = new LinkedList<>();

		if (reviews.empty())
			return common;

		// First product IDs that customer 1 loved
		LinkedList<Integer> cust1Loves = new LinkedList<>();

		reviews.findFirst();
		while (!reviews.last()) {
			Review r = reviews.retrieve();
			if (r.getCustomer().getCustomerId() == custId1 && r.getRating() > 4) {
				cust1Loves.insert(r.getProduct().getProductId());
			}
			reviews.findNext();
		}
		Review last = reviews.retrieve();
		if (last.getCustomer().getCustomerId() == custId1 && last.getRating() > 4) {
			cust1Loves.insert(last.getProduct().getProductId());
		}

		// Find matches in customer 2
		reviews.findFirst();
		while (!reviews.last()) {
			Review r = reviews.retrieve();
			if (r.getCustomer().getCustomerId() == custId2 && r.getRating() > 4) {
				int productId = r.getProduct().getProductId();

				// Check if customer 1 also loved this product
				boolean cust1AlsoLoves = false;
				if (!cust1Loves.empty()) {
					cust1Loves.findFirst();
					while (!cust1Loves.last()) {
						if (cust1Loves.retrieve() == productId) {
							cust1AlsoLoves = true;
							break;
						}
						cust1Loves.findNext();
					}
					if (cust1Loves.retrieve() == productId) {
						cust1AlsoLoves = true;
					}
				}

				// Check if we already added this product
				boolean alreadyAdded = false;
				if (!common.empty()) {
					common.findFirst();
					while (!common.last()) {
						if (common.retrieve().getProductId() == productId) {
							alreadyAdded = true;
							break;
						}
						common.findNext();
					}
					if (common.retrieve().getProductId() == productId) {
						alreadyAdded = true;
					}
				}

				if (cust1AlsoLoves && !alreadyAdded) {
					common.insert(r.getProduct());
				}
			}
			reviews.findNext();
		}

		// Check last review for customer 2
		if (last.getCustomer().getCustomerId() == custId2 && last.getRating() > 4) {
			int productId = last.getProduct().getProductId();

			boolean cust1AlsoLoves = false;
			if (!cust1Loves.empty()) {
				cust1Loves.findFirst();
				while (!cust1Loves.last()) {
					if (cust1Loves.retrieve() == productId) {
						cust1AlsoLoves = true;
						break;
					}
					cust1Loves.findNext();
				}
				if (cust1Loves.retrieve() == productId) {
					cust1AlsoLoves = true;
				}
			}

			boolean alreadyAdded = false;
			if (!common.empty()) {
				common.findFirst();
				while (!common.last()) {
					if (common.retrieve().getProductId() == productId) {
						alreadyAdded = true;
						break;
					}
					common.findNext();
				}
				if (common.retrieve().getProductId() == productId) {
					alreadyAdded = true;
				}
			}

			if (cust1AlsoLoves && !alreadyAdded) {
				common.insert(last.getProduct());
			}
		}

		return common;
	}





// (7) top three products by rating
	public LinkedList<Product> getTop3Products() {
		Product first = null, second = null, third = null;
		double r1 = -1, r2 = -1, r3 = -1;

		if (!products.empty()) {
			products.findFirst();
			while (!products.last()) {
				Product product = products.retrieve();
				double rating = product.getAverageRating();

				if (rating > r1) {
					third = second;
					r3 = r2;
					second = first;
					r2 = r1;
					first = product;
					r1 = rating;
				} else if (rating > r2) {
					third = second;
					r3 = r2;
					second = product;
					r2 = rating;
				} else if (rating > r3) {
					third = product;
					r3 = rating;
				}

				products.findNext();
			}
			// last element
			Product lastProduct = products.retrieve();
			double lastRating = lastProduct.getAverageRating();
			if (lastRating > r1) {
				third = second;
				r3 = r2;
				second = first;
				r2 = r1;
				first = lastProduct;
				r1 = lastRating;
			} else if (lastRating > r2) {
				third = second;
				r3 = r2;
				second = lastProduct;
				r2 = lastRating;
			} else if (lastRating > r3) {
				third = lastProduct;
				r3 = lastRating;
			}
		}

		LinkedList<Product> result = new LinkedList<>();
		if (first != null)
			result.insert(first);
		if (second != null)
			result.insert(second);
		if (third != null)
			result.insert(third);

		return result;
	}





// (8) track out of stock products
	public LinkedList<Product> trackOutOfStockProducts() {
		LinkedList<Product> outOfStock = new LinkedList<>();
		products.findFirst();
		while (!products.last()) {
			Product product = products.retrieve();
			if (product.getStock() <= 0) {
				outOfStock.insert(product);
			}
			products.findNext();
		}
		Product product = products.retrieve();
		if (product.getStock() <= 0) {
			outOfStock.insert(product);
		}
		return outOfStock;
	}






// (9) add product
	public void addProduct(Product product) {
		products.insert(product);
	}

 




// (10) remove product
	public boolean removeProduct(int productId) {
		products.findFirst();
		while (!products.last()) {
			Product product = products.retrieve();
			if (product.getProductId() == productId) {
				products.remove();
				return true;
			}
			products.findNext();
		}
		Product product = products.retrieve();
		if (product.getProductId() == productId) {
			products.remove();
			return true;
		}
		return false;
	}








// (11) update a product
	public void updateProduct(int productId, String name, double price, int stock) {
		Product product = searchProductById(productId);
		if (product != null) {
			product.setName(name);
			product.setPrice(price);
			product.setStock(stock);
		}
	}






// (12) Search a product id
    public Product searchProductById(int productId) {
		products.findFirst();
		while (!products.last()) {
			Product product = products.retrieve();
			if (product.getProductId() == productId) {
				return product;
			}
			products.findNext();
		}
		Product product = products.retrieve();
		return (product.getProductId() == productId) ? product : null;
	}






// (13) Search product name
    public Product searchProductByName(String name) {
		products.findFirst();
		while (!products.last()) {
			Product product = products.retrieve();
			if (product.getName().equalsIgnoreCase(name)) {
				return product;
			}
			products.findNext();
		}
		Product product = products.retrieve();
		return (product.getName().equalsIgnoreCase(name)) ? product : null;
	}






// (14) product average rating by id
    public double getAverageRating(int productId) {
		Product product = searchProductById(productId);
		return (product != null) ? product.getAverageRating() : 0.0;
	}






// (15) Display all products that are in stock 
    public void displayAvailableProducts() {
	    if (products.empty()) {
	        System.out.println(" No products available in the system.");
	        return;
	    }
	    
	    System.out.println("\n AVAILABLE PRODUCTS (In Stock):");
	    System.out.println("┌─────┬────────────────────────────────────┬────────────┬───────┐");
	    System.out.println("│ ID  │ Product Name                       │ Price      │ Stock │");
	    System.out.println("├─────┼────────────────────────────────────┼────────────┼───────┤");
	    
	    products.findFirst();
	    while (!products.last()) {
	        Product p = products.retrieve();
	        if (p.getStock() > 0) {
	            System.out.printf("│ %-3d │ %-34s │ $%-9.2f │ %-5d │%n",
	                p.getProductId(), p.getName(), p.getPrice(), p.getStock());
	        }
	        products.findNext();
	    }
	    
	    // Check last product
	    Product last = products.retrieve();
	    if (last.getStock() > 0) {
	        System.out.printf("│ %-3d │ %-34s │ $%-9.2f │ %-5d │%n",
	            last.getProductId(), last.getName(), last.getPrice(), last.getStock());
	    }
	    
	    System.out.println("└─────┴────────────────────────────────────┴────────────┴───────┘");
	}


																										//==END OF PRODUCT OPERATIONS==


																										//== 	ORDER OPERATIONS	==
																							
																									
// (16) Create order 
    public Order createOrder(int orderId , int customerId , LinkedList<Product> products , String orderDate){
    Customer customer = searchCustomerById(customerId);
    if (customer == null) {
   System.out.println("Customer not found.");
        return null;
    }
    double totalPrice = 0;
    if (!products.empty()) {
        products.findFirst();
        while (!products.last()) {
            totalPrice += products.retrieve().getPrice();
            products.findNext();
        }
        totalPrice += products.retrieve().getPrice(); 
    }

    Order newOrder = new Order(orderId, customer, products, totalPrice, orderDate, "Pending");
    orders.insert(newOrder);
    customer.addOrder(newOrder); 
    return newOrder;
    }
//end of method creat order






// (17) Cancel order 
    public void cancelOrder(int orderId) {
    if (orders.empty()) {
        System.out.println("No orders found!");
        return;
    }
    
    orders.findFirst();
    while (!orders.last()) {
        Order order = orders.retrieve();
        if (order.getOrderId() == orderId) {
            order.setStatus("Cancelled");
            System.out.println("Order " + orderId + " cancelled successfully!");
            return;
        }
        orders.findNext();
    }
    
    // Check last order
    Order lastOrder = orders.retrieve();
    if (lastOrder.getOrderId() == orderId) {
        lastOrder.setStatus("Cancelled");
        System.out.println("Order " + orderId + " cancelled successfully!");
        return;
    }
    
    System.out.println("Order with ID " + orderId + " not found!");
}





// (18) Update order 
    public void updateOrderStatus(int orderId, String newStatus) {
    if (orders.empty()) {
        System.out.println("No orders found!");
        return;
    }
    
    orders.findFirst();
    while (!orders.last()) {
        Order order = orders.retrieve();
        if (order.getOrderId() == orderId) {
            order.setStatus(newStatus);
            System.out.println("Order " + orderId + " status updated to: " + newStatus);
            return;
        }
        orders.findNext();
    }
    
    // Check last order
    Order lastOrder = orders.retrieve();
    if (lastOrder.getOrderId() == orderId) {
        lastOrder.setStatus(newStatus);
        System.out.println("Order " + orderId + " status updated to: " + newStatus);
        return;
    }
    
    System.out.println("Order with ID " + orderId + " not found!");
}





// (19) Search an order id
	public Order searchOrderById(int orderId) {
    orders.findFirst();
    while (!orders.last()) {
        Order order = orders.retrieve();
        if (order.getOrderId() == orderId) {
            return order;
        }
        orders.findNext();
    }
    Order order = orders.retrieve();
    return (order.getOrderId() == orderId) ? order : null;
}

  



// (20) Get all orders between two dates
      public LinkedList<Order> getAllOrdersBetweenDates(String startDate, String endDate) {
      LinkedList<Order> ordersInRange = new LinkedList<>();
    
          if (orders.empty()) {
            return ordersInRange;
        }
    
         orders.findFirst();
         while (!orders.last()) {
         Order order = orders.retrieve();
         String orderDate = order.getOrderDate();
        
        if (orderDate.compareTo(startDate) >= 0 && orderDate.compareTo(endDate) <= 0) {
            ordersInRange.insert(order);
        }
        orders.findNext();
    }
    
    // Check last order
    Order lastOrder = orders.retrieve();
    if (lastOrder.getOrderDate().compareTo(startDate) >= 0 && 
        lastOrder.getOrderDate().compareTo(endDate) <= 0) {
        ordersInRange.insert(lastOrder);
    }
    
    return ordersInRange;
}
																	
																										//==END OF ORDER OPERATIONS==



    
														// Main method for loading
	public void loadAllData() {
		System.out.println("Loading all data...");
		loadCustomers();
		loadProducts();
		loadOrders();
		loadReviews();
		System.out.println("Data loading completed!");
	}

	private void loadCustomers() {
		try (BufferedReader br = new BufferedReader(new FileReader("customers.csv"))) {
			String line = br.readLine(); // Skip header
			int count = 0;

			while ((line = br.readLine()) != null) {
				String[] data = line.split(",");
				if (data.length >= 3) {
					int customerId = Integer.parseInt(data[0].trim());
					String name = data[1].trim();
					String email = data[2].trim();

					Customer customer = new Customer(customerId, name, email);
					customers.insert(customer);
					count++;
				}
			}
			System.out.println("Loaded " + count + " customers");
		} catch (IOException e) {
			System.err.println("Error loading customers: " + e.getMessage());
		}
	}

	private void loadProducts() {
		try (BufferedReader br = new BufferedReader(new FileReader("prodcuts.csv"))) {
			String line = br.readLine(); // Skip header
			int count = 0;

			while ((line = br.readLine()) != null) {
				String[] data = line.split(",");
				if (data.length >= 4) {
					int productId = Integer.parseInt(data[0].trim());
					String name = data[1].trim();
					double price = Double.parseDouble(data[2].trim());
					int stock = Integer.parseInt(data[3].trim());

					Product product = new Product(productId, name, price, stock);
					products.insert(product);
					count++;
				}
			}
			System.out.println("Loaded " + count + " products");
		} catch (IOException e) {
			System.err.println("Error loading products: " + e.getMessage());
		}
	}

	private void loadOrders() {
		try (BufferedReader br = new BufferedReader(new FileReader("orders.csv"))) {
			String line = br.readLine(); // Skip header
			int count = 0;

			while ((line = br.readLine()) != null) {
				String[] data = line.split(",");
				if (data.length >= 6) {
					int orderId = Integer.parseInt(data[0].trim());
					int customerId = Integer.parseInt(data[1].trim());
					String productIdsStr = data[2].trim().replace("\"", "");
					double totalPrice = Double.parseDouble(data[3].trim());
					String orderDate = data[4].trim();
					String status = data[5].trim();

					Customer customer = searchCustomerById(customerId);
					if (customer != null) {
						LinkedList<Product> orderProducts = new LinkedList<>();
						String[] productIds = productIdsStr.split(";");

						for (String productIdStr : productIds) {
							int productId = Integer.parseInt(productIdStr.trim());
							Product product = searchProductById(productId);
							if (product != null) {
								orderProducts.insert(product);
							}
						}

						Order order = new Order(orderId, customer, orderProducts, totalPrice, orderDate, status);
						orders.insert(order);
						customer.addOrder(order);
						count++;
					}
				}
			}
			System.out.println("Loaded " + count + " orders");
		} catch (IOException e) {
			System.err.println("Error loading orders: " + e.getMessage());
		}
	}

	private void loadReviews() {
		try (BufferedReader br = new BufferedReader(new FileReader("reviews.csv"))) {
			String line = br.readLine(); // Skip header
			int count = 0;

			while ((line = br.readLine()) != null) {
				String[] data = line.split(",");
				if (data.length >= 5) {
					int reviewId = Integer.parseInt(data[0].trim());
					int productId = Integer.parseInt(data[1].trim());
					int customerId = Integer.parseInt(data[2].trim());
					int rating = Integer.parseInt(data[3].trim());
					String comment = data[4].trim().replace("\"", "");

					Product product = searchProductById(productId);
					Customer customer = searchCustomerById(customerId);

					if (product != null && customer != null) {
						Review review = new Review(reviewId, product, customer, rating, comment);
						reviews.insert(review);
						product.addReview(review);
						count++;
					}
				}
			}
			System.out.println("Loaded " + count + " reviews");
		} catch (IOException e) {
			System.err.println("Error loading reviews: " + e.getMessage());
		}
	}
    
}


